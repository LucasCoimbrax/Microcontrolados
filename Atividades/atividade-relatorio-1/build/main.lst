ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.main,"ax",%progbits
  20              		.align	1
  21              		.global	main
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	main:
  27              	.LFB130:
  28              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "button.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 2


  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/main.c **** void SystemClock_Config(void);
  50:Core/Src/main.c **** static void MX_GPIO_Init(void);
  51:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  56:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END 0 */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /**
  61:Core/Src/main.c ****   * @brief  The application entry point.
  62:Core/Src/main.c ****   * @retval int
  63:Core/Src/main.c ****   */
  64:Core/Src/main.c **** int main(void)
  65:Core/Src/main.c **** {
  29              		.loc 1 65 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  66:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  67:Core/Src/main.c ****   uint32_t i;
  68:Core/Src/main.c ****   uint16_t leds = 0;
  44              		.loc 1 68 12
  45 0006 0023     		movs	r3, #0
  46 0008 7B80     		strh	r3, [r7, #2]	@ movhi
  69:Core/Src/main.c ****   /* USER CODE END 1 */
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 3


  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  74:Core/Src/main.c ****   HAL_Init();
  47              		.loc 1 74 3
  48 000a FFF7FEFF 		bl	HAL_Init
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE END Init */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* Configure the system clock */
  81:Core/Src/main.c ****   SystemClock_Config();
  49              		.loc 1 81 3
  50 000e FFF7FEFF 		bl	SystemClock_Config
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE END SysInit */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* Initialize all configured peripherals */
  88:Core/Src/main.c ****   MX_GPIO_Init();
  51              		.loc 1 88 3
  52 0012 FFF7FEFF 		bl	MX_GPIO_Init
  53              	.L11:
  89:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE END 2 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* Infinite loop */
  94:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
  95:Core/Src/main.c ****   while (1)
  96:Core/Src/main.c ****   {
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****     // uint8_t bit0 = 1 << 0;
  99:Core/Src/main.c ****     // uint8_t contagem = 13;
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****     // for( i = 0; i < 10; i++)
 102:Core/Src/main.c ****     // {
 103:Core/Src/main.c ****     //   // Aciona apenas 1 vez quando o botão é precionado
 104:Core/Src/main.c ****     //   if( button_release( GPIOA, GPIO_PIN_5, 0) )
 105:Core/Src/main.c ****     //   {
 106:Core/Src/main.c ****     //     // Estado logico baixo quando iniciado
 107:Core/Src/main.c ****     //     HAL_GPIO_WritePin( GPIOB, leds, 0 );
 108:Core/Src/main.c ****     //     // Condicional com o led ele verifica se o led esta com o bit referente em 1, que nem a 
 109:Core/Src/main.c ****     //     // e caso seja falso ele pega o botão da vez e multiplica o bit 1 dele por 0xF8 que con
 110:Core/Src/main.c ****     //     // conseguir uma saida atribuindo ao leds
 111:Core/Src/main.c ****     //     // leds = (leds == 0) ? 1 << 3 : (( leds << 1) & 0xF8);
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****     //     //Seta o nivel logido alto do botão da vez
 114:Core/Src/main.c ****     //     HAL_GPIO_WritePin( GPIOB, leds, 1 );
 115:Core/Src/main.c ****     //   }
 116:Core/Src/main.c ****     //   // Pequeno delay que interage com o if e for, ou seja, a cada 45 seg ele esta verificando 
 117:Core/Src/main.c ****     //   HAL_Delay(45);
 118:Core/Src/main.c ****     // }
 119:Core/Src/main.c **** 
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 4


 120:Core/Src/main.c ****     // // Acende o led da placa em paralelo independente
 121:Core/Src/main.c ****     // HAL_GPIO_TogglePin(KIT_LED_GPIO_Port, KIT_LED_Pin);
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****     for( i = 0; i < 10; i++)
  54              		.loc 1 123 12
  55 0016 0023     		movs	r3, #0
  56 0018 7B60     		str	r3, [r7, #4]
  57              		.loc 1 123 5
  58 001a 3CE0     		b	.L2
  59              	.L10:
 124:Core/Src/main.c ****     {
 125:Core/Src/main.c ****     // Lê o sinal do botão
 126:Core/Src/main.c ****       if( button_release( GPIOA, GPIO_PIN_5, 0 ) )
  60              		.loc 1 126 11
  61 001c 0022     		movs	r2, #0
  62 001e 2021     		movs	r1, #32
  63 0020 2048     		ldr	r0, .L12
  64 0022 FFF7FEFF 		bl	button_release
  65 0026 0346     		mov	r3, r0
  66              		.loc 1 126 9
  67 0028 002B     		cmp	r3, #0
  68 002a 2ED0     		beq	.L3
 127:Core/Src/main.c ****       {
 128:Core/Src/main.c ****         // Começa com os leds apagados
 129:Core/Src/main.c ****         HAL_GPIO_WritePin( GPIOB, leds, 0 );
  69              		.loc 1 129 9
  70 002c 7B88     		ldrh	r3, [r7, #2]
  71 002e 0022     		movs	r2, #0
  72 0030 1946     		mov	r1, r3
  73 0032 1D48     		ldr	r0, .L12+4
  74 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****         if( leds == 0 )
  75              		.loc 1 131 11
  76 0038 7B88     		ldrh	r3, [r7, #2]
  77 003a 002B     		cmp	r3, #0
  78 003c 02D1     		bne	.L4
 132:Core/Src/main.c ****         {
 133:Core/Src/main.c ****           leds = LED_1_Pin;
  79              		.loc 1 133 16
  80 003e 0823     		movs	r3, #8
  81 0040 7B80     		strh	r3, [r7, #2]	@ movhi
  82 0042 1CE0     		b	.L5
  83              	.L4:
 134:Core/Src/main.c ****         } else if ( leds == LED_1_Pin)
  84              		.loc 1 134 19
  85 0044 7B88     		ldrh	r3, [r7, #2]
  86 0046 082B     		cmp	r3, #8
  87 0048 02D1     		bne	.L6
 135:Core/Src/main.c ****         {
 136:Core/Src/main.c ****           leds = LED_2_Pin;
  88              		.loc 1 136 16
  89 004a 1023     		movs	r3, #16
  90 004c 7B80     		strh	r3, [r7, #2]	@ movhi
  91 004e 16E0     		b	.L5
  92              	.L6:
 137:Core/Src/main.c ****         } else if ( leds == LED_2_Pin)
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 5


  93              		.loc 1 137 19
  94 0050 7B88     		ldrh	r3, [r7, #2]
  95 0052 102B     		cmp	r3, #16
  96 0054 02D1     		bne	.L7
 138:Core/Src/main.c ****         {
 139:Core/Src/main.c ****           leds = LED_3_Pin;
  97              		.loc 1 139 16
  98 0056 2023     		movs	r3, #32
  99 0058 7B80     		strh	r3, [r7, #2]	@ movhi
 100 005a 10E0     		b	.L5
 101              	.L7:
 140:Core/Src/main.c ****         } else if ( leds == LED_3_Pin)
 102              		.loc 1 140 19
 103 005c 7B88     		ldrh	r3, [r7, #2]
 104 005e 202B     		cmp	r3, #32
 105 0060 02D1     		bne	.L8
 141:Core/Src/main.c ****         {
 142:Core/Src/main.c ****           leds = LED_4_Pin;
 106              		.loc 1 142 16
 107 0062 4023     		movs	r3, #64
 108 0064 7B80     		strh	r3, [r7, #2]	@ movhi
 109 0066 0AE0     		b	.L5
 110              	.L8:
 143:Core/Src/main.c ****         } else if ( leds == LED_4_Pin)
 111              		.loc 1 143 19
 112 0068 7B88     		ldrh	r3, [r7, #2]
 113 006a 402B     		cmp	r3, #64
 114 006c 02D1     		bne	.L9
 144:Core/Src/main.c ****         {
 145:Core/Src/main.c ****           leds = LED_5_Pin;
 115              		.loc 1 145 16
 116 006e 8023     		movs	r3, #128
 117 0070 7B80     		strh	r3, [r7, #2]	@ movhi
 118 0072 04E0     		b	.L5
 119              	.L9:
 146:Core/Src/main.c ****         } else if ( leds == LED_5_Pin)
 120              		.loc 1 146 19
 121 0074 7B88     		ldrh	r3, [r7, #2]
 122 0076 802B     		cmp	r3, #128
 123 0078 01D1     		bne	.L5
 147:Core/Src/main.c ****         {
 148:Core/Src/main.c ****           leds = 0;
 124              		.loc 1 148 16
 125 007a 0023     		movs	r3, #0
 126 007c 7B80     		strh	r3, [r7, #2]	@ movhi
 127              	.L5:
 149:Core/Src/main.c ****         }
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****         // Acende dos leds setados 
 152:Core/Src/main.c ****         HAL_GPIO_WritePin( GPIOB, leds, 1 );
 128              		.loc 1 152 9
 129 007e 7B88     		ldrh	r3, [r7, #2]
 130 0080 0122     		movs	r2, #1
 131 0082 1946     		mov	r1, r3
 132 0084 0848     		ldr	r0, .L12+4
 133 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.L3:
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 6


 153:Core/Src/main.c ****       }
 154:Core/Src/main.c ****       HAL_Delay(45);
 135              		.loc 1 154 7 discriminator 2
 136 008a 2D20     		movs	r0, #45
 137 008c FFF7FEFF 		bl	HAL_Delay
 123:Core/Src/main.c ****     {
 138              		.loc 1 123 26 discriminator 2
 139 0090 7B68     		ldr	r3, [r7, #4]
 140 0092 0133     		adds	r3, r3, #1
 141 0094 7B60     		str	r3, [r7, #4]
 142              	.L2:
 123:Core/Src/main.c ****     {
 143              		.loc 1 123 19 discriminator 1
 144 0096 7B68     		ldr	r3, [r7, #4]
 145 0098 092B     		cmp	r3, #9
 146 009a BFD9     		bls	.L10
 155:Core/Src/main.c ****     }
 156:Core/Src/main.c ****     HAL_Delay(200);
 147              		.loc 1 156 5
 148 009c C820     		movs	r0, #200
 149 009e FFF7FEFF 		bl	HAL_Delay
 123:Core/Src/main.c ****     {
 150              		.loc 1 123 12
 151 00a2 B8E7     		b	.L11
 152              	.L13:
 153              		.align	2
 154              	.L12:
 155 00a4 00000240 		.word	1073872896
 156 00a8 00040240 		.word	1073873920
 157              		.cfi_endproc
 158              	.LFE130:
 160              		.section	.text.SystemClock_Config,"ax",%progbits
 161              		.align	1
 162              		.global	SystemClock_Config
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 167              	SystemClock_Config:
 168              	.LFB131:
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****     /* USER CODE END WHILE */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 161:Core/Src/main.c ****   }
 162:Core/Src/main.c ****   /* USER CODE END 3 */
 163:Core/Src/main.c **** }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /**
 166:Core/Src/main.c ****   * @brief System Clock Configuration
 167:Core/Src/main.c ****   * @retval None
 168:Core/Src/main.c ****   */
 169:Core/Src/main.c **** void SystemClock_Config(void)
 170:Core/Src/main.c **** {
 169              		.loc 1 170 1
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 80
 172              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 7


 173 0000 80B5     		push	{r7, lr}
 174              	.LCFI3:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 7, -8
 177              		.cfi_offset 14, -4
 178 0002 94B0     		sub	sp, sp, #80
 179              	.LCFI4:
 180              		.cfi_def_cfa_offset 88
 181 0004 00AF     		add	r7, sp, #0
 182              	.LCFI5:
 183              		.cfi_def_cfa_register 7
 171:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 184              		.loc 1 171 22
 185 0006 07F12003 		add	r3, r7, #32
 186 000a 3022     		movs	r2, #48
 187 000c 0021     		movs	r1, #0
 188 000e 1846     		mov	r0, r3
 189 0010 FFF7FEFF 		bl	memset
 172:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 190              		.loc 1 172 22
 191 0014 07F10C03 		add	r3, r7, #12
 192 0018 0022     		movs	r2, #0
 193 001a 1A60     		str	r2, [r3]
 194 001c 5A60     		str	r2, [r3, #4]
 195 001e 9A60     		str	r2, [r3, #8]
 196 0020 DA60     		str	r2, [r3, #12]
 197 0022 1A61     		str	r2, [r3, #16]
 198              	.LBB4:
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 175:Core/Src/main.c ****   */
 176:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 199              		.loc 1 176 3
 200 0024 0023     		movs	r3, #0
 201 0026 BB60     		str	r3, [r7, #8]
 202 0028 274B     		ldr	r3, .L18
 203 002a 1B6C     		ldr	r3, [r3, #64]
 204 002c 264A     		ldr	r2, .L18
 205 002e 43F08053 		orr	r3, r3, #268435456
 206 0032 1364     		str	r3, [r2, #64]
 207 0034 244B     		ldr	r3, .L18
 208 0036 1B6C     		ldr	r3, [r3, #64]
 209 0038 03F08053 		and	r3, r3, #268435456
 210 003c BB60     		str	r3, [r7, #8]
 211 003e BB68     		ldr	r3, [r7, #8]
 212              	.LBE4:
 213              	.LBB5:
 177:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 214              		.loc 1 177 3
 215 0040 0023     		movs	r3, #0
 216 0042 7B60     		str	r3, [r7, #4]
 217 0044 214B     		ldr	r3, .L18+4
 218 0046 1B68     		ldr	r3, [r3]
 219 0048 204A     		ldr	r2, .L18+4
 220 004a 43F44043 		orr	r3, r3, #49152
 221 004e 1360     		str	r3, [r2]
 222 0050 1E4B     		ldr	r3, .L18+4
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 8


 223 0052 1B68     		ldr	r3, [r3]
 224 0054 03F44043 		and	r3, r3, #49152
 225 0058 7B60     		str	r3, [r7, #4]
 226 005a 7B68     		ldr	r3, [r7, #4]
 227              	.LBE5:
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 180:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 228              		.loc 1 182 36
 229 005c 0123     		movs	r3, #1
 230 005e 3B62     		str	r3, [r7, #32]
 183:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 231              		.loc 1 183 30
 232 0060 4FF48033 		mov	r3, #65536
 233 0064 7B62     		str	r3, [r7, #36]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 234              		.loc 1 184 34
 235 0066 0223     		movs	r3, #2
 236 0068 BB63     		str	r3, [r7, #56]
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 237              		.loc 1 185 35
 238 006a 4FF48003 		mov	r3, #4194304
 239 006e FB63     		str	r3, [r7, #60]
 186:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 240              		.loc 1 186 30
 241 0070 1923     		movs	r3, #25
 242 0072 3B64     		str	r3, [r7, #64]
 187:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 243              		.loc 1 187 30
 244 0074 C023     		movs	r3, #192
 245 0076 7B64     		str	r3, [r7, #68]
 188:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 246              		.loc 1 188 30
 247 0078 0223     		movs	r3, #2
 248 007a BB64     		str	r3, [r7, #72]
 189:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 249              		.loc 1 189 30
 250 007c 0423     		movs	r3, #4
 251 007e FB64     		str	r3, [r7, #76]
 190:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 252              		.loc 1 190 7
 253 0080 07F12003 		add	r3, r7, #32
 254 0084 1846     		mov	r0, r3
 255 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 256 008a 0346     		mov	r3, r0
 257              		.loc 1 190 6
 258 008c 002B     		cmp	r3, #0
 259 008e 01D0     		beq	.L15
 191:Core/Src/main.c ****   {
 192:Core/Src/main.c ****     Error_Handler();
 260              		.loc 1 192 5
 261 0090 FFF7FEFF 		bl	Error_Handler
 262              	.L15:
 193:Core/Src/main.c ****   }
 194:Core/Src/main.c **** 
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 9


 195:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 263              		.loc 1 197 31
 264 0094 0F23     		movs	r3, #15
 265 0096 FB60     		str	r3, [r7, #12]
 198:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 199:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 266              		.loc 1 199 34
 267 0098 0223     		movs	r3, #2
 268 009a 3B61     		str	r3, [r7, #16]
 200:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 269              		.loc 1 200 35
 270 009c 0023     		movs	r3, #0
 271 009e 7B61     		str	r3, [r7, #20]
 201:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 272              		.loc 1 201 36
 273 00a0 4FF48053 		mov	r3, #4096
 274 00a4 BB61     		str	r3, [r7, #24]
 202:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 275              		.loc 1 202 36
 276 00a6 0023     		movs	r3, #0
 277 00a8 FB61     		str	r3, [r7, #28]
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 278              		.loc 1 204 7
 279 00aa 07F10C03 		add	r3, r7, #12
 280 00ae 0321     		movs	r1, #3
 281 00b0 1846     		mov	r0, r3
 282 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 283 00b6 0346     		mov	r3, r0
 284              		.loc 1 204 6
 285 00b8 002B     		cmp	r3, #0
 286 00ba 01D0     		beq	.L17
 205:Core/Src/main.c ****   {
 206:Core/Src/main.c ****     Error_Handler();
 287              		.loc 1 206 5
 288 00bc FFF7FEFF 		bl	Error_Handler
 289              	.L17:
 207:Core/Src/main.c ****   }
 208:Core/Src/main.c **** }
 290              		.loc 1 208 1
 291 00c0 00BF     		nop
 292 00c2 5037     		adds	r7, r7, #80
 293              	.LCFI6:
 294              		.cfi_def_cfa_offset 8
 295 00c4 BD46     		mov	sp, r7
 296              	.LCFI7:
 297              		.cfi_def_cfa_register 13
 298              		@ sp needed
 299 00c6 80BD     		pop	{r7, pc}
 300              	.L19:
 301              		.align	2
 302              	.L18:
 303 00c8 00380240 		.word	1073887232
 304 00cc 00700040 		.word	1073770496
 305              		.cfi_endproc
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 10


 306              	.LFE131:
 308              		.section	.text.MX_GPIO_Init,"ax",%progbits
 309              		.align	1
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 314              	MX_GPIO_Init:
 315              	.LFB132:
 209:Core/Src/main.c **** 
 210:Core/Src/main.c **** /**
 211:Core/Src/main.c ****   * @brief GPIO Initialization Function
 212:Core/Src/main.c ****   * @param None
 213:Core/Src/main.c ****   * @retval None
 214:Core/Src/main.c ****   */
 215:Core/Src/main.c **** static void MX_GPIO_Init(void)
 216:Core/Src/main.c **** {
 316              		.loc 1 216 1
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 40
 319              		@ frame_needed = 1, uses_anonymous_args = 0
 320 0000 80B5     		push	{r7, lr}
 321              	.LCFI8:
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 7, -8
 324              		.cfi_offset 14, -4
 325 0002 8AB0     		sub	sp, sp, #40
 326              	.LCFI9:
 327              		.cfi_def_cfa_offset 48
 328 0004 00AF     		add	r7, sp, #0
 329              	.LCFI10:
 330              		.cfi_def_cfa_register 7
 217:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 331              		.loc 1 217 20
 332 0006 07F11403 		add	r3, r7, #20
 333 000a 0022     		movs	r2, #0
 334 000c 1A60     		str	r2, [r3]
 335 000e 5A60     		str	r2, [r3, #4]
 336 0010 9A60     		str	r2, [r3, #8]
 337 0012 DA60     		str	r2, [r3, #12]
 338 0014 1A61     		str	r2, [r3, #16]
 339              	.LBB6:
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 220:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 340              		.loc 1 220 3
 341 0016 0023     		movs	r3, #0
 342 0018 3B61     		str	r3, [r7, #16]
 343 001a 374B     		ldr	r3, .L21
 344 001c 1B6B     		ldr	r3, [r3, #48]
 345 001e 364A     		ldr	r2, .L21
 346 0020 43F00403 		orr	r3, r3, #4
 347 0024 1363     		str	r3, [r2, #48]
 348 0026 344B     		ldr	r3, .L21
 349 0028 1B6B     		ldr	r3, [r3, #48]
 350 002a 03F00403 		and	r3, r3, #4
 351 002e 3B61     		str	r3, [r7, #16]
 352 0030 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 11


 353              	.LBE6:
 354              	.LBB7:
 221:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 355              		.loc 1 221 3
 356 0032 0023     		movs	r3, #0
 357 0034 FB60     		str	r3, [r7, #12]
 358 0036 304B     		ldr	r3, .L21
 359 0038 1B6B     		ldr	r3, [r3, #48]
 360 003a 2F4A     		ldr	r2, .L21
 361 003c 43F08003 		orr	r3, r3, #128
 362 0040 1363     		str	r3, [r2, #48]
 363 0042 2D4B     		ldr	r3, .L21
 364 0044 1B6B     		ldr	r3, [r3, #48]
 365 0046 03F08003 		and	r3, r3, #128
 366 004a FB60     		str	r3, [r7, #12]
 367 004c FB68     		ldr	r3, [r7, #12]
 368              	.LBE7:
 369              	.LBB8:
 222:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 370              		.loc 1 222 3
 371 004e 0023     		movs	r3, #0
 372 0050 BB60     		str	r3, [r7, #8]
 373 0052 294B     		ldr	r3, .L21
 374 0054 1B6B     		ldr	r3, [r3, #48]
 375 0056 284A     		ldr	r2, .L21
 376 0058 43F00103 		orr	r3, r3, #1
 377 005c 1363     		str	r3, [r2, #48]
 378 005e 264B     		ldr	r3, .L21
 379 0060 1B6B     		ldr	r3, [r3, #48]
 380 0062 03F00103 		and	r3, r3, #1
 381 0066 BB60     		str	r3, [r7, #8]
 382 0068 BB68     		ldr	r3, [r7, #8]
 383              	.LBE8:
 384              	.LBB9:
 223:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 385              		.loc 1 223 3
 386 006a 0023     		movs	r3, #0
 387 006c 7B60     		str	r3, [r7, #4]
 388 006e 224B     		ldr	r3, .L21
 389 0070 1B6B     		ldr	r3, [r3, #48]
 390 0072 214A     		ldr	r2, .L21
 391 0074 43F00203 		orr	r3, r3, #2
 392 0078 1363     		str	r3, [r2, #48]
 393 007a 1F4B     		ldr	r3, .L21
 394 007c 1B6B     		ldr	r3, [r3, #48]
 395 007e 03F00203 		and	r3, r3, #2
 396 0082 7B60     		str	r3, [r7, #4]
 397 0084 7B68     		ldr	r3, [r7, #4]
 398              	.LBE9:
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 226:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 399              		.loc 1 226 3
 400 0086 0022     		movs	r2, #0
 401 0088 4FF40051 		mov	r1, #8192
 402 008c 1B48     		ldr	r0, .L21+4
 403 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 12


 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 229:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 404              		.loc 1 229 3
 405 0092 0022     		movs	r2, #0
 406 0094 F821     		movs	r1, #248
 407 0096 1A48     		ldr	r0, .L21+8
 408 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 230:Core/Src/main.c ****                           |LED_5_Pin, GPIO_PIN_RESET);
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 233:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 409              		.loc 1 233 23
 410 009c 4FF40053 		mov	r3, #8192
 411 00a0 7B61     		str	r3, [r7, #20]
 234:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 412              		.loc 1 234 24
 413 00a2 0123     		movs	r3, #1
 414 00a4 BB61     		str	r3, [r7, #24]
 235:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 415              		.loc 1 235 24
 416 00a6 0023     		movs	r3, #0
 417 00a8 FB61     		str	r3, [r7, #28]
 236:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 418              		.loc 1 236 25
 419 00aa 0023     		movs	r3, #0
 420 00ac 3B62     		str	r3, [r7, #32]
 237:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 421              		.loc 1 237 3
 422 00ae 07F11403 		add	r3, r7, #20
 423 00b2 1946     		mov	r1, r3
 424 00b4 1148     		ldr	r0, .L21+4
 425 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /*Configure GPIO pin : BUTTON_Pin */
 240:Core/Src/main.c ****   GPIO_InitStruct.Pin = BUTTON_Pin;
 426              		.loc 1 240 23
 427 00ba 2023     		movs	r3, #32
 428 00bc 7B61     		str	r3, [r7, #20]
 241:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 429              		.loc 1 241 24
 430 00be 0023     		movs	r3, #0
 431 00c0 BB61     		str	r3, [r7, #24]
 242:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 432              		.loc 1 242 24
 433 00c2 0023     		movs	r3, #0
 434 00c4 FB61     		str	r3, [r7, #28]
 243:Core/Src/main.c ****   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 435              		.loc 1 243 3
 436 00c6 07F11403 		add	r3, r7, #20
 437 00ca 1946     		mov	r1, r3
 438 00cc 0D48     		ldr	r0, .L21+12
 439 00ce FFF7FEFF 		bl	HAL_GPIO_Init
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
 246:Core/Src/main.c ****                            LED_5_Pin */
 247:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 13


 440              		.loc 1 247 23
 441 00d2 F823     		movs	r3, #248
 442 00d4 7B61     		str	r3, [r7, #20]
 248:Core/Src/main.c ****                           |LED_5_Pin;
 249:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 443              		.loc 1 249 24
 444 00d6 0123     		movs	r3, #1
 445 00d8 BB61     		str	r3, [r7, #24]
 250:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 446              		.loc 1 250 24
 447 00da 0023     		movs	r3, #0
 448 00dc FB61     		str	r3, [r7, #28]
 251:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 449              		.loc 1 251 25
 450 00de 0023     		movs	r3, #0
 451 00e0 3B62     		str	r3, [r7, #32]
 252:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 452              		.loc 1 252 3
 453 00e2 07F11403 		add	r3, r7, #20
 454 00e6 1946     		mov	r1, r3
 455 00e8 0548     		ldr	r0, .L21+8
 456 00ea FFF7FEFF 		bl	HAL_GPIO_Init
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** }
 457              		.loc 1 254 1
 458 00ee 00BF     		nop
 459 00f0 2837     		adds	r7, r7, #40
 460              	.LCFI11:
 461              		.cfi_def_cfa_offset 8
 462 00f2 BD46     		mov	sp, r7
 463              	.LCFI12:
 464              		.cfi_def_cfa_register 13
 465              		@ sp needed
 466 00f4 80BD     		pop	{r7, pc}
 467              	.L22:
 468 00f6 00BF     		.align	2
 469              	.L21:
 470 00f8 00380240 		.word	1073887232
 471 00fc 00080240 		.word	1073874944
 472 0100 00040240 		.word	1073873920
 473 0104 00000240 		.word	1073872896
 474              		.cfi_endproc
 475              	.LFE132:
 477              		.section	.text.Error_Handler,"ax",%progbits
 478              		.align	1
 479              		.global	Error_Handler
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 484              	Error_Handler:
 485              	.LFB133:
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** /* USER CODE END 4 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 14


 261:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 262:Core/Src/main.c ****   * @retval None
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c **** void Error_Handler(void)
 265:Core/Src/main.c **** {
 486              		.loc 1 265 1
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491 0000 80B4     		push	{r7}
 492              	.LCFI13:
 493              		.cfi_def_cfa_offset 4
 494              		.cfi_offset 7, -4
 495 0002 00AF     		add	r7, sp, #0
 496              	.LCFI14:
 497              		.cfi_def_cfa_register 7
 498              	.LBB10:
 499              	.LBB11:
 500              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 15


  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 16


  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 501              		.loc 2 142 3
 502              		.syntax unified
 503              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 504 0004 72B6     		cpsid i
 505              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 506              		.loc 2 143 1
 507              		.thumb
 508              		.syntax unified
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 17


 509 0006 00BF     		nop
 510              	.L24:
 511              	.LBE11:
 512              	.LBE10:
 266:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 267:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 268:Core/Src/main.c ****   __disable_irq();
 269:Core/Src/main.c ****   while (1)
 513              		.loc 1 269 9 discriminator 1
 514 0008 FEE7     		b	.L24
 515              		.cfi_endproc
 516              	.LFE133:
 518              		.text
 519              	.Letext0:
 520              		.file 3 "e:\\utfpr\\microcontrolados\\programas\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel
 521              		.file 4 "e:\\utfpr\\microcontrolados\\programas\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel
 522              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 523              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 524              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 525              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 526              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 527              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 528              		.file 11 "Core/Inc/button.h"
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:20     .text.main:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:26     .text.main:00000000 main
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:167    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:314    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:155    .text.main:000000a4 $d
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:161    .text.SystemClock_Config:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:484    .text.Error_Handler:00000000 Error_Handler
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:303    .text.SystemClock_Config:000000c8 $d
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:309    .text.MX_GPIO_Init:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:470    .text.MX_GPIO_Init:000000f8 $d
C:\Users\coimb\AppData\Local\Temp\ccBo1uBb.s:478    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_Init
button_release
HAL_GPIO_WritePin
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_GPIO_Init
