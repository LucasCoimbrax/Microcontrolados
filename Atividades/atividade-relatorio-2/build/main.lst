ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.main,"ax",%progbits
  20              		.align	1
  21              		.global	main
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	main:
  27              	.LFB130:
  28              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "button.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 2


  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/main.c **** void SystemClock_Config(void);
  50:Core/Src/main.c **** static void MX_GPIO_Init(void);
  51:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  56:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END 0 */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /**
  61:Core/Src/main.c ****   * @brief  The application entry point.
  62:Core/Src/main.c ****   * @retval int
  63:Core/Src/main.c ****   */
  64:Core/Src/main.c **** int main(void)
  65:Core/Src/main.c **** {
  29              		.loc 1 65 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  66:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  67:Core/Src/main.c ****   uint32_t i;
  68:Core/Src/main.c ****   uint32_t lendo = 1;
  44              		.loc 1 68 12
  45 0006 0123     		movs	r3, #1
  46 0008 7B60     		str	r3, [r7, #4]
  69:Core/Src/main.c ****   uint16_t existe_objeto = 0;
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 3


  47              		.loc 1 69 12
  48 000a 0023     		movs	r3, #0
  49 000c 7B80     		strh	r3, [r7, #2]	@ movhi
  70:Core/Src/main.c ****   uint16_t nao_existe_objeto = 0;
  50              		.loc 1 70 12
  51 000e 0023     		movs	r3, #0
  52 0010 3B80     		strh	r3, [r7]	@ movhi
  71:Core/Src/main.c ****   /* USER CODE END 1 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  76:Core/Src/main.c ****   HAL_Init();
  53              		.loc 1 76 3
  54 0012 FFF7FEFF 		bl	HAL_Init
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END Init */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Configure the system clock */
  83:Core/Src/main.c ****   SystemClock_Config();
  55              		.loc 1 83 3
  56 0016 FFF7FEFF 		bl	SystemClock_Config
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END SysInit */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Initialize all configured peripherals */
  90:Core/Src/main.c ****   MX_GPIO_Init();
  57              		.loc 1 90 3
  58 001a FFF7FEFF 		bl	MX_GPIO_Init
  59              	.L6:
  91:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 2 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Infinite loop */
  96:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
  97:Core/Src/main.c ****   while (1)
  98:Core/Src/main.c ****   {
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****     if( button_release( GPIOA, GPIO_PIN_5, 0) )
  60              		.loc 1 100 9
  61 001e 0022     		movs	r2, #0
  62 0020 2021     		movs	r1, #32
  63 0022 2848     		ldr	r0, .L7
  64 0024 FFF7FEFF 		bl	button_release
  65 0028 0346     		mov	r3, r0
  66              		.loc 1 100 7
  67 002a 002B     		cmp	r3, #0
  68 002c F7D0     		beq	.L6
 101:Core/Src/main.c ****     {
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****       HAL_GPIO_WritePin( GPIOA, TRIGGER_Pin, 1);
  69              		.loc 1 103 7
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 4


  70 002e 0122     		movs	r2, #1
  71 0030 8021     		movs	r1, #128
  72 0032 2448     		ldr	r0, .L7
  73 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104:Core/Src/main.c ****       HAL_Delay(10);
  74              		.loc 1 104 7
  75 0038 0A20     		movs	r0, #10
  76 003a FFF7FEFF 		bl	HAL_Delay
 105:Core/Src/main.c ****       HAL_GPIO_WritePin( GPIOA, TRIGGER_Pin, 0);
  77              		.loc 1 105 7
  78 003e 0022     		movs	r2, #0
  79 0040 8021     		movs	r1, #128
  80 0042 2048     		ldr	r0, .L7
  81 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****       while ( lendo == 1)
  82              		.loc 1 107 13
  83 0048 27E0     		b	.L3
  84              	.L5:
 108:Core/Src/main.c ****       {
 109:Core/Src/main.c ****         if( HAL_GPIO_ReadPin( GPIOA, ECHO_Pin ) == 1)
  85              		.loc 1 109 13
  86 004a 4021     		movs	r1, #64
  87 004c 1D48     		ldr	r0, .L7
  88 004e FFF7FEFF 		bl	HAL_GPIO_ReadPin
  89 0052 0346     		mov	r3, r0
  90              		.loc 1 109 11
  91 0054 012B     		cmp	r3, #1
  92 0056 0CD1     		bne	.L4
 110:Core/Src/main.c ****         {
 111:Core/Src/main.c ****           HAL_GPIO_WritePin( GPIOB, GPIO_PIN_4, 1 );
  93              		.loc 1 111 11
  94 0058 0122     		movs	r2, #1
  95 005a 1021     		movs	r1, #16
  96 005c 1A48     		ldr	r0, .L7+4
  97 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 112:Core/Src/main.c ****           HAL_GPIO_WritePin( GPIOB, GPIO_PIN_5, 1 );
  98              		.loc 1 112 11
  99 0062 0122     		movs	r2, #1
 100 0064 2021     		movs	r1, #32
 101 0066 1848     		ldr	r0, .L7+4
 102 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 113:Core/Src/main.c ****           lendo = 0;
 103              		.loc 1 113 17
 104 006c 0023     		movs	r3, #0
 105 006e 7B60     		str	r3, [r7, #4]
 106 0070 13E0     		b	.L3
 107              	.L4:
 114:Core/Src/main.c ****         } 
 115:Core/Src/main.c ****         else
 116:Core/Src/main.c ****         {
 117:Core/Src/main.c ****           HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1 );
 108              		.loc 1 117 11
 109 0072 0122     		movs	r2, #1
 110 0074 0821     		movs	r1, #8
 111 0076 1448     		ldr	r0, .L7+4
 112 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 5


 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****           if( button_release( GPIOA, GPIO_PIN_5, 0) )
 113              		.loc 1 119 15
 114 007c 0022     		movs	r2, #0
 115 007e 2021     		movs	r1, #32
 116 0080 1048     		ldr	r0, .L7
 117 0082 FFF7FEFF 		bl	button_release
 118 0086 0346     		mov	r3, r0
 119              		.loc 1 119 13
 120 0088 002B     		cmp	r3, #0
 121 008a 06D0     		beq	.L3
 120:Core/Src/main.c ****           {
 121:Core/Src/main.c ****             lendo = 0;
 122              		.loc 1 121 19
 123 008c 0023     		movs	r3, #0
 124 008e 7B60     		str	r3, [r7, #4]
 122:Core/Src/main.c ****             HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 0 );
 125              		.loc 1 122 13
 126 0090 0022     		movs	r2, #0
 127 0092 0821     		movs	r1, #8
 128 0094 0C48     		ldr	r0, .L7+4
 129 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 130              	.L3:
 107:Core/Src/main.c ****       {
 131              		.loc 1 107 21
 132 009a 7B68     		ldr	r3, [r7, #4]
 133 009c 012B     		cmp	r3, #1
 134 009e D4D0     		beq	.L5
 123:Core/Src/main.c ****           }
 124:Core/Src/main.c ****         }
 125:Core/Src/main.c ****       }
 126:Core/Src/main.c ****       lendo = 1;
 135              		.loc 1 126 13
 136 00a0 0123     		movs	r3, #1
 137 00a2 7B60     		str	r3, [r7, #4]
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****       HAL_GPIO_WritePin( GPIOB, GPIO_PIN_4, 0 );
 138              		.loc 1 128 7
 139 00a4 0022     		movs	r2, #0
 140 00a6 1021     		movs	r1, #16
 141 00a8 0748     		ldr	r0, .L7+4
 142 00aa FFF7FEFF 		bl	HAL_GPIO_WritePin
 129:Core/Src/main.c ****       HAL_GPIO_WritePin( GPIOB, GPIO_PIN_5, 0 );
 143              		.loc 1 129 7
 144 00ae 0022     		movs	r2, #0
 145 00b0 2021     		movs	r1, #32
 146 00b2 0548     		ldr	r0, .L7+4
 147 00b4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****       HAL_Delay(1000);
 148              		.loc 1 131 7
 149 00b8 4FF47A70 		mov	r0, #1000
 150 00bc FFF7FEFF 		bl	HAL_Delay
 100:Core/Src/main.c ****     {
 151              		.loc 1 100 7
 152 00c0 ADE7     		b	.L6
 153              	.L8:
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 6


 154 00c2 00BF     		.align	2
 155              	.L7:
 156 00c4 00000240 		.word	1073872896
 157 00c8 00040240 		.word	1073873920
 158              		.cfi_endproc
 159              	.LFE130:
 161              		.section	.text.SystemClock_Config,"ax",%progbits
 162              		.align	1
 163              		.global	SystemClock_Config
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 168              	SystemClock_Config:
 169              	.LFB131:
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     // if( button_release( GPIOA, GPIO_PIN_5, 0) )
 134:Core/Src/main.c ****     // {
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_4, 0 );
 137:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 0 );
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 1);
 140:Core/Src/main.c ****     //   HAL_Delay(30);
 141:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOA, GPIO_PIN_7, 0);
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****     //   while ( lendo )
 144:Core/Src/main.c ****     //   {
 145:Core/Src/main.c ****     //     if( HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_6 ) )
 146:Core/Src/main.c ****     //     {
 147:Core/Src/main.c ****     //       HAL_GPIO_WritePin( GPIOB, GPIO_PIN_4, 1 );
 148:Core/Src/main.c ****     //       HAL_GPIO_WritePin( GPIOB, GPIO_PIN_5, 1 );
 149:Core/Src/main.c ****     //       lendo--;
 150:Core/Src/main.c ****     //     } 
 151:Core/Src/main.c ****     //     else
 152:Core/Src/main.c ****     //     {
 153:Core/Src/main.c ****     //       HAL_GPIO_WritePin( GPIOB, GPIO_PIN_3, 1 );
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****     //       if( button_release( GPIOA, GPIO_PIN_5, 0) )
 156:Core/Src/main.c ****     //       {
 157:Core/Src/main.c ****     //         lendo--;
 158:Core/Src/main.c ****     //       }
 159:Core/Src/main.c ****     //     }
 160:Core/Src/main.c ****     //   }
 161:Core/Src/main.c ****     //   lendo++;
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****       
 164:Core/Src/main.c ****       
 165:Core/Src/main.c ****     }
 166:Core/Src/main.c ****       
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****       // if( HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_6) )
 169:Core/Src/main.c ****       // {
 170:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 0);
 171:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_1_Pin, 1);
 172:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_2_Pin, 1);
 173:Core/Src/main.c ****       // } else {
 174:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 1);
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 7


 175:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_1_Pin, 0);
 176:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_2_Pin, 0);
 177:Core/Src/main.c ****       // }
 178:Core/Src/main.c ****     
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****     // HAL_GPIO_WritePin( GPIOA, TRIGGER_Pin, 1);
 181:Core/Src/main.c ****     // HAL_Delay(120);
 182:Core/Src/main.c ****     // HAL_GPIO_WritePin( GPIOA, TRIGGER_Pin, 0);
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****     // if( HAL_GPIO_ReadPin( GPIOA, ECHO_Pin) )
 186:Core/Src/main.c ****     // {
 187:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 1);
 188:Core/Src/main.c ****     // } else {
 189:Core/Src/main.c ****     //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 0);
 190:Core/Src/main.c ****     // }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     // if( button_release( GPIOA, GPIO_PIN_5, 0) )
 194:Core/Src/main.c ****     // {
 195:Core/Src/main.c ****     //   HAL_GPIO_TogglePin( GPIOA, TRIGGER_Pin);
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****     //   if( !HAL_GPIO_ReadPin( GPIOA, ECHO_Pin) )
 198:Core/Src/main.c ****     //   {
 199:Core/Src/main.c ****     //     HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 1);
 200:Core/Src/main.c ****     //   } else {
 201:Core/Src/main.c ****     //     HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 0);
 202:Core/Src/main.c ****     //   }
 203:Core/Src/main.c ****     // }
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****       // if( !HAL_GPIO_ReadPin( GPIOA, ECHO_Pin) )
 206:Core/Src/main.c ****       // {
 207:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_1_Pin, 0);
 208:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_2_Pin, 0);
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 1);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****       //   nao_existe_objeto++;
 213:Core/Src/main.c ****       // } 
 214:Core/Src/main.c ****       // else 
 215:Core/Src/main.c ****       // {
 216:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_PERTO_Pin, 0);
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_1_Pin, 1);
 219:Core/Src/main.c ****       //   HAL_GPIO_WritePin( GPIOB, LED_LONGE_2_Pin, 1);
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****       //   existe_objeto++;
 222:Core/Src/main.c ****       // }    
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   }
 225:Core/Src/main.c ****   /* USER CODE END 3 */
 226:Core/Src/main.c **** }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /**
 229:Core/Src/main.c ****   * @brief System Clock Configuration
 230:Core/Src/main.c ****   * @retval None
 231:Core/Src/main.c ****   */
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 8


 232:Core/Src/main.c **** void SystemClock_Config(void)
 233:Core/Src/main.c **** {
 170              		.loc 1 233 1
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 80
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 80B5     		push	{r7, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
 179 0002 94B0     		sub	sp, sp, #80
 180              	.LCFI4:
 181              		.cfi_def_cfa_offset 88
 182 0004 00AF     		add	r7, sp, #0
 183              	.LCFI5:
 184              		.cfi_def_cfa_register 7
 234:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 185              		.loc 1 234 22
 186 0006 07F12003 		add	r3, r7, #32
 187 000a 3022     		movs	r2, #48
 188 000c 0021     		movs	r1, #0
 189 000e 1846     		mov	r0, r3
 190 0010 FFF7FEFF 		bl	memset
 235:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 191              		.loc 1 235 22
 192 0014 07F10C03 		add	r3, r7, #12
 193 0018 0022     		movs	r2, #0
 194 001a 1A60     		str	r2, [r3]
 195 001c 5A60     		str	r2, [r3, #4]
 196 001e 9A60     		str	r2, [r3, #8]
 197 0020 DA60     		str	r2, [r3, #12]
 198 0022 1A61     		str	r2, [r3, #16]
 199              	.LBB4:
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 238:Core/Src/main.c ****   */
 239:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 200              		.loc 1 239 3
 201 0024 0023     		movs	r3, #0
 202 0026 BB60     		str	r3, [r7, #8]
 203 0028 274B     		ldr	r3, .L13
 204 002a 1B6C     		ldr	r3, [r3, #64]
 205 002c 264A     		ldr	r2, .L13
 206 002e 43F08053 		orr	r3, r3, #268435456
 207 0032 1364     		str	r3, [r2, #64]
 208 0034 244B     		ldr	r3, .L13
 209 0036 1B6C     		ldr	r3, [r3, #64]
 210 0038 03F08053 		and	r3, r3, #268435456
 211 003c BB60     		str	r3, [r7, #8]
 212 003e BB68     		ldr	r3, [r7, #8]
 213              	.LBE4:
 214              	.LBB5:
 240:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 215              		.loc 1 240 3
 216 0040 0023     		movs	r3, #0
 217 0042 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 9


 218 0044 214B     		ldr	r3, .L13+4
 219 0046 1B68     		ldr	r3, [r3]
 220 0048 204A     		ldr	r2, .L13+4
 221 004a 43F44043 		orr	r3, r3, #49152
 222 004e 1360     		str	r3, [r2]
 223 0050 1E4B     		ldr	r3, .L13+4
 224 0052 1B68     		ldr	r3, [r3]
 225 0054 03F44043 		and	r3, r3, #49152
 226 0058 7B60     		str	r3, [r7, #4]
 227 005a 7B68     		ldr	r3, [r7, #4]
 228              	.LBE5:
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 243:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 229              		.loc 1 245 36
 230 005c 0123     		movs	r3, #1
 231 005e 3B62     		str	r3, [r7, #32]
 246:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 232              		.loc 1 246 30
 233 0060 4FF48033 		mov	r3, #65536
 234 0064 7B62     		str	r3, [r7, #36]
 247:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 235              		.loc 1 247 34
 236 0066 0223     		movs	r3, #2
 237 0068 BB63     		str	r3, [r7, #56]
 248:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 238              		.loc 1 248 35
 239 006a 4FF48003 		mov	r3, #4194304
 240 006e FB63     		str	r3, [r7, #60]
 249:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 25;
 241              		.loc 1 249 30
 242 0070 1923     		movs	r3, #25
 243 0072 3B64     		str	r3, [r7, #64]
 250:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 192;
 244              		.loc 1 250 30
 245 0074 C023     		movs	r3, #192
 246 0076 7B64     		str	r3, [r7, #68]
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 247              		.loc 1 251 30
 248 0078 0223     		movs	r3, #2
 249 007a BB64     		str	r3, [r7, #72]
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 250              		.loc 1 252 30
 251 007c 0423     		movs	r3, #4
 252 007e FB64     		str	r3, [r7, #76]
 253:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 253              		.loc 1 253 7
 254 0080 07F12003 		add	r3, r7, #32
 255 0084 1846     		mov	r0, r3
 256 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 257 008a 0346     		mov	r3, r0
 258              		.loc 1 253 6
 259 008c 002B     		cmp	r3, #0
 260 008e 01D0     		beq	.L10
 254:Core/Src/main.c ****   {
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 10


 255:Core/Src/main.c ****     Error_Handler();
 261              		.loc 1 255 5
 262 0090 FFF7FEFF 		bl	Error_Handler
 263              	.L10:
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 264              		.loc 1 260 31
 265 0094 0F23     		movs	r3, #15
 266 0096 FB60     		str	r3, [r7, #12]
 261:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 262:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 267              		.loc 1 262 34
 268 0098 0223     		movs	r3, #2
 269 009a 3B61     		str	r3, [r7, #16]
 263:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 270              		.loc 1 263 35
 271 009c 0023     		movs	r3, #0
 272 009e 7B61     		str	r3, [r7, #20]
 264:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 273              		.loc 1 264 36
 274 00a0 4FF48053 		mov	r3, #4096
 275 00a4 BB61     		str	r3, [r7, #24]
 265:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 276              		.loc 1 265 36
 277 00a6 0023     		movs	r3, #0
 278 00a8 FB61     		str	r3, [r7, #28]
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 279              		.loc 1 267 7
 280 00aa 07F10C03 		add	r3, r7, #12
 281 00ae 0321     		movs	r1, #3
 282 00b0 1846     		mov	r0, r3
 283 00b2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 284 00b6 0346     		mov	r3, r0
 285              		.loc 1 267 6
 286 00b8 002B     		cmp	r3, #0
 287 00ba 01D0     		beq	.L12
 268:Core/Src/main.c ****   {
 269:Core/Src/main.c ****     Error_Handler();
 288              		.loc 1 269 5
 289 00bc FFF7FEFF 		bl	Error_Handler
 290              	.L12:
 270:Core/Src/main.c ****   }
 271:Core/Src/main.c **** }
 291              		.loc 1 271 1
 292 00c0 00BF     		nop
 293 00c2 5037     		adds	r7, r7, #80
 294              	.LCFI6:
 295              		.cfi_def_cfa_offset 8
 296 00c4 BD46     		mov	sp, r7
 297              	.LCFI7:
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 00c6 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 11


 301              	.L14:
 302              		.align	2
 303              	.L13:
 304 00c8 00380240 		.word	1073887232
 305 00cc 00700040 		.word	1073770496
 306              		.cfi_endproc
 307              	.LFE131:
 309              		.section	.text.MX_GPIO_Init,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 315              	MX_GPIO_Init:
 316              	.LFB132:
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /**
 274:Core/Src/main.c ****   * @brief GPIO Initialization Function
 275:Core/Src/main.c ****   * @param None
 276:Core/Src/main.c ****   * @retval None
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c **** static void MX_GPIO_Init(void)
 279:Core/Src/main.c **** {
 317              		.loc 1 279 1
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 40
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321 0000 80B5     		push	{r7, lr}
 322              	.LCFI8:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 7, -8
 325              		.cfi_offset 14, -4
 326 0002 8AB0     		sub	sp, sp, #40
 327              	.LCFI9:
 328              		.cfi_def_cfa_offset 48
 329 0004 00AF     		add	r7, sp, #0
 330              	.LCFI10:
 331              		.cfi_def_cfa_register 7
 280:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 332              		.loc 1 280 20
 333 0006 07F11403 		add	r3, r7, #20
 334 000a 0022     		movs	r2, #0
 335 000c 1A60     		str	r2, [r3]
 336 000e 5A60     		str	r2, [r3, #4]
 337 0010 9A60     		str	r2, [r3, #8]
 338 0012 DA60     		str	r2, [r3, #12]
 339 0014 1A61     		str	r2, [r3, #16]
 340              	.LBB6:
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 283:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 341              		.loc 1 283 3
 342 0016 0023     		movs	r3, #0
 343 0018 3B61     		str	r3, [r7, #16]
 344 001a 404B     		ldr	r3, .L16
 345 001c 1B6B     		ldr	r3, [r3, #48]
 346 001e 3F4A     		ldr	r2, .L16
 347 0020 43F00403 		orr	r3, r3, #4
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 12


 348 0024 1363     		str	r3, [r2, #48]
 349 0026 3D4B     		ldr	r3, .L16
 350 0028 1B6B     		ldr	r3, [r3, #48]
 351 002a 03F00403 		and	r3, r3, #4
 352 002e 3B61     		str	r3, [r7, #16]
 353 0030 3B69     		ldr	r3, [r7, #16]
 354              	.LBE6:
 355              	.LBB7:
 284:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 356              		.loc 1 284 3
 357 0032 0023     		movs	r3, #0
 358 0034 FB60     		str	r3, [r7, #12]
 359 0036 394B     		ldr	r3, .L16
 360 0038 1B6B     		ldr	r3, [r3, #48]
 361 003a 384A     		ldr	r2, .L16
 362 003c 43F08003 		orr	r3, r3, #128
 363 0040 1363     		str	r3, [r2, #48]
 364 0042 364B     		ldr	r3, .L16
 365 0044 1B6B     		ldr	r3, [r3, #48]
 366 0046 03F08003 		and	r3, r3, #128
 367 004a FB60     		str	r3, [r7, #12]
 368 004c FB68     		ldr	r3, [r7, #12]
 369              	.LBE7:
 370              	.LBB8:
 285:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 371              		.loc 1 285 3
 372 004e 0023     		movs	r3, #0
 373 0050 BB60     		str	r3, [r7, #8]
 374 0052 324B     		ldr	r3, .L16
 375 0054 1B6B     		ldr	r3, [r3, #48]
 376 0056 314A     		ldr	r2, .L16
 377 0058 43F00103 		orr	r3, r3, #1
 378 005c 1363     		str	r3, [r2, #48]
 379 005e 2F4B     		ldr	r3, .L16
 380 0060 1B6B     		ldr	r3, [r3, #48]
 381 0062 03F00103 		and	r3, r3, #1
 382 0066 BB60     		str	r3, [r7, #8]
 383 0068 BB68     		ldr	r3, [r7, #8]
 384              	.LBE8:
 385              	.LBB9:
 286:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 386              		.loc 1 286 3
 387 006a 0023     		movs	r3, #0
 388 006c 7B60     		str	r3, [r7, #4]
 389 006e 2B4B     		ldr	r3, .L16
 390 0070 1B6B     		ldr	r3, [r3, #48]
 391 0072 2A4A     		ldr	r2, .L16
 392 0074 43F00203 		orr	r3, r3, #2
 393 0078 1363     		str	r3, [r2, #48]
 394 007a 284B     		ldr	r3, .L16
 395 007c 1B6B     		ldr	r3, [r3, #48]
 396 007e 03F00203 		and	r3, r3, #2
 397 0082 7B60     		str	r3, [r7, #4]
 398 0084 7B68     		ldr	r3, [r7, #4]
 399              	.LBE9:
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 13


 289:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 400              		.loc 1 289 3
 401 0086 0022     		movs	r2, #0
 402 0088 4FF40051 		mov	r1, #8192
 403 008c 2448     		ldr	r0, .L16+4
 404 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 292:Core/Src/main.c ****   HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 405              		.loc 1 292 3
 406 0092 0022     		movs	r2, #0
 407 0094 8021     		movs	r1, #128
 408 0096 2348     		ldr	r0, .L16+8
 409 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 295:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, LED_PERTO_Pin|LED_LONGE_1_Pin|LED_LONGE_2_Pin, GPIO_PIN_RESET);
 410              		.loc 1 295 3
 411 009c 0022     		movs	r2, #0
 412 009e 3821     		movs	r1, #56
 413 00a0 2148     		ldr	r0, .L16+12
 414 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 298:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 415              		.loc 1 298 23
 416 00a6 4FF40053 		mov	r3, #8192
 417 00aa 7B61     		str	r3, [r7, #20]
 299:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 418              		.loc 1 299 24
 419 00ac 0123     		movs	r3, #1
 420 00ae BB61     		str	r3, [r7, #24]
 300:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 421              		.loc 1 300 24
 422 00b0 0023     		movs	r3, #0
 423 00b2 FB61     		str	r3, [r7, #28]
 301:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 424              		.loc 1 301 25
 425 00b4 0023     		movs	r3, #0
 426 00b6 3B62     		str	r3, [r7, #32]
 302:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 427              		.loc 1 302 3
 428 00b8 07F11403 		add	r3, r7, #20
 429 00bc 1946     		mov	r1, r3
 430 00be 1848     		ldr	r0, .L16+4
 431 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /*Configure GPIO pins : BUTTON_Pin ECHO_Pin */
 305:Core/Src/main.c ****   GPIO_InitStruct.Pin = BUTTON_Pin|ECHO_Pin;
 432              		.loc 1 305 23
 433 00c4 6023     		movs	r3, #96
 434 00c6 7B61     		str	r3, [r7, #20]
 306:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 435              		.loc 1 306 24
 436 00c8 0023     		movs	r3, #0
 437 00ca BB61     		str	r3, [r7, #24]
 307:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 14


 438              		.loc 1 307 24
 439 00cc 0023     		movs	r3, #0
 440 00ce FB61     		str	r3, [r7, #28]
 308:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 441              		.loc 1 308 3
 442 00d0 07F11403 		add	r3, r7, #20
 443 00d4 1946     		mov	r1, r3
 444 00d6 1348     		ldr	r0, .L16+8
 445 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /*Configure GPIO pin : TRIGGER_Pin */
 311:Core/Src/main.c ****   GPIO_InitStruct.Pin = TRIGGER_Pin;
 446              		.loc 1 311 23
 447 00dc 8023     		movs	r3, #128
 448 00de 7B61     		str	r3, [r7, #20]
 312:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 449              		.loc 1 312 24
 450 00e0 0123     		movs	r3, #1
 451 00e2 BB61     		str	r3, [r7, #24]
 313:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 452              		.loc 1 313 24
 453 00e4 0023     		movs	r3, #0
 454 00e6 FB61     		str	r3, [r7, #28]
 314:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 455              		.loc 1 314 25
 456 00e8 0023     		movs	r3, #0
 457 00ea 3B62     		str	r3, [r7, #32]
 315:Core/Src/main.c ****   HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 458              		.loc 1 315 3
 459 00ec 07F11403 		add	r3, r7, #20
 460 00f0 1946     		mov	r1, r3
 461 00f2 0C48     		ldr	r0, .L16+8
 462 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /*Configure GPIO pins : LED_PERTO_Pin LED_LONGE_1_Pin LED_LONGE_2_Pin */
 318:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_PERTO_Pin|LED_LONGE_1_Pin|LED_LONGE_2_Pin;
 463              		.loc 1 318 23
 464 00f8 3823     		movs	r3, #56
 465 00fa 7B61     		str	r3, [r7, #20]
 319:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 466              		.loc 1 319 24
 467 00fc 0123     		movs	r3, #1
 468 00fe BB61     		str	r3, [r7, #24]
 320:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 469              		.loc 1 320 24
 470 0100 0023     		movs	r3, #0
 471 0102 FB61     		str	r3, [r7, #28]
 321:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 472              		.loc 1 321 25
 473 0104 0023     		movs	r3, #0
 474 0106 3B62     		str	r3, [r7, #32]
 322:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 475              		.loc 1 322 3
 476 0108 07F11403 		add	r3, r7, #20
 477 010c 1946     		mov	r1, r3
 478 010e 0648     		ldr	r0, .L16+12
 479 0110 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 15


 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** }
 480              		.loc 1 324 1
 481 0114 00BF     		nop
 482 0116 2837     		adds	r7, r7, #40
 483              	.LCFI11:
 484              		.cfi_def_cfa_offset 8
 485 0118 BD46     		mov	sp, r7
 486              	.LCFI12:
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 011a 80BD     		pop	{r7, pc}
 490              	.L17:
 491              		.align	2
 492              	.L16:
 493 011c 00380240 		.word	1073887232
 494 0120 00080240 		.word	1073874944
 495 0124 00000240 		.word	1073872896
 496 0128 00040240 		.word	1073873920
 497              		.cfi_endproc
 498              	.LFE132:
 500              		.section	.text.Error_Handler,"ax",%progbits
 501              		.align	1
 502              		.global	Error_Handler
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 507              	Error_Handler:
 508              	.LFB133:
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** /* USER CODE END 4 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** /**
 331:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 332:Core/Src/main.c ****   * @retval None
 333:Core/Src/main.c ****   */
 334:Core/Src/main.c **** void Error_Handler(void)
 335:Core/Src/main.c **** {
 509              		.loc 1 335 1
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514 0000 80B4     		push	{r7}
 515              	.LCFI13:
 516              		.cfi_def_cfa_offset 4
 517              		.cfi_offset 7, -4
 518 0002 00AF     		add	r7, sp, #0
 519              	.LCFI14:
 520              		.cfi_def_cfa_register 7
 521              	.LBB10:
 522              	.LBB11:
 523              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 16


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 17


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 18


 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 524              		.loc 2 142 3
 525              		.syntax unified
 526              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 527 0004 72B6     		cpsid i
 528              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 529              		.loc 2 143 1
 530              		.thumb
 531              		.syntax unified
 532 0006 00BF     		nop
 533              	.L19:
 534              	.LBE11:
 535              	.LBE10:
 336:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 337:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 338:Core/Src/main.c ****   __disable_irq();
 339:Core/Src/main.c ****   while (1)
 536              		.loc 1 339 9 discriminator 1
 537 0008 FEE7     		b	.L19
 538              		.cfi_endproc
 539              	.LFE133:
 541              		.text
 542              	.Letext0:
 543              		.file 3 "e:\\utfpr\\microcontrolados\\programas\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel
 544              		.file 4 "e:\\utfpr\\microcontrolados\\programas\\arm-gcc\\tools\\tools\\arm-gnu-toolchain-11.3.rel
 545              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 546              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 547              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 548              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 549              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 550              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 19


 551              		.file 11 "Core/Inc/button.h"
ARM GAS  C:\Users\coimb\AppData\Local\Temp\ccThlldM.s 			page 20


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:20     .text.main:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:26     .text.main:00000000 main
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:168    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:315    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:156    .text.main:000000c4 $d
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:162    .text.SystemClock_Config:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:507    .text.Error_Handler:00000000 Error_Handler
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:304    .text.SystemClock_Config:000000c8 $d
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:310    .text.MX_GPIO_Init:00000000 $t
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:493    .text.MX_GPIO_Init:0000011c $d
C:\Users\coimb\AppData\Local\Temp\ccThlldM.s:501    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_Init
button_release
HAL_GPIO_WritePin
HAL_Delay
HAL_GPIO_ReadPin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_GPIO_Init
